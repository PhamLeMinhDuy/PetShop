const express = require("express");
const Order = require("../models/Order");
const User = require("../models/User");
const Pet = require("../models/Pet"); 
const router = express.Router();

// üìå API l·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa user
router.get("/user/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    // T√¨m danh s√°ch ƒë∆°n h√†ng c·ªßa user
    const orders = await Order.find({ userId }).sort({ createdAt: -1 }); // S·∫Øp x·∫øp m·ªõi nh·∫•t tr∆∞·ªõc

    res.json({ orders });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});


// üìå API th√™m ƒë∆°n h√†ng
router.post("/add", async (req, res) => {
  try {
    const { userId, items } = req.body;

    // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "‚ùå Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });

    // L·∫•y d·ªØ li·ªáu th√∫ c∆∞ng ƒë·ªÉ c√≥ h√¨nh ·∫£nh
    const updatedItems = await Promise.all(
      items.map(async (item) => {
        const pet = await Pet.findById(item.petId);
        return {
          ...item,
          image: pet ? pet.image : "", // üñºÔ∏è Th√™m h√¨nh ·∫£nh n·∫øu c√≥
        };
      })
    );

    // T√≠nh t·ªïng ti·ªÅn
    const totalPrice = updatedItems.reduce((sum, item) => sum + item.price * item.quantity, 0);

    // T·∫°o ƒë∆°n h√†ng m·ªõi
    const newOrder = new Order({ userId, items: updatedItems, totalPrice });
    await newOrder.save();

    // Th√™m order v√†o User
    user.orderHistory.push(newOrder._id);
    await user.save();

    res.json({ message: "‚úÖ ƒê√£ th√™m ƒë∆°n h√†ng!", order: newOrder });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

// ‚ùå API xo√° ƒë∆°n h√†ng (removeOrder)
router.delete("/remove/:orderId", async (req, res) => {
  try {
    const { orderId } = req.params;

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(orderId);
    if (!order) return res.status(404).json({ message: "‚ùå ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i!" });

    // X√≥a order kh·ªèi User
    await User.findByIdAndUpdate(order.userId, { $pull: { orderHistory: orderId } });

    // X√≥a order kh·ªèi DB
    await Order.findByIdAndDelete(orderId);

    res.json({ message: "‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a!" });
  } catch (error) {
    console.error("‚ùå L·ªói server:", error);
    res.status(500).json({ message: "L·ªói server, vui l√≤ng th·ª≠ l·∫°i!" });
  }
});

// routes/order.js
router.put("/pay/:orderId", async (req, res) => {
  try {
    const order = await Order.findById(req.params.orderId);
    if (!order) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });

    order.status = "paid";
    await order.save();

    res.json({ message: "Thanh to√°n th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói thanh to√°n:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
});

// ‚úÖ Thanh to√°n nhi·ªÅu ƒë∆°n h√†ng (gi·∫£ l·∫≠p)
router.put("/pay", async (req, res) => {
  const { orderIds } = req.body;

  if (!Array.isArray(orderIds)) {
    return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" });
  }

  try {
    // Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω thanh to√°n
    await new Promise((resolve) => setTimeout(resolve, 1000));

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i cho t·ª´ng ƒë∆°n h√†ng
    await Promise.all(
      orderIds.map(async (id) => {
        await Order.findByIdAndUpdate(id, {
          status: "paid",
          paidAt: new Date(),
        });
      })
    );

    res.json({ message: "Thanh to√°n th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói thanh to√°n:", error);
    res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi thanh to√°n." });
  }
});


module.exports = router;
